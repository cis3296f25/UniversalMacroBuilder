@startuml
class Main {
    ' takes in command line args to either start recording threads or start the robot reproducer
    + String: in_file_str
    + String: out_file_str
    + argChecks(args[]: String)
}

class Recorder {
    ' this class simply starts and synchronizes the keyboard and mouse event recorders
    outpath: File
}

class Replayer implements Robot {
    inpath: File
}

class KeyboardEventRecorder implements NativeKeyListener {
    ' this thread will record keyboard input and save the input to an arraylist of keyevent. may potentially need multithreading and syncronization to allow multiple key presses to be recorded at the same time?
    - ArrayList<KeyEvent>: keyEvents
}

class MouseEventRecorder implements NativeMouseInputListener {
    ' this thread will record mouse input similarly to the keyboard recorder
    - ArrayList<MouseEvent>: mouseEvent
}

class KeyEvent {
    - delta: long
    - event: NativeKeyEvent
    + getDelta(): long
    + getEvent(): NativeKeyEvent
}

class MouseEvent {
    - delta: long
    - event: NativeMouseEvent
    + getDelta(): long
    + getEvent(): NativeMouseEvent
}

Main --> Recorder
Recorder --> MouseEventRecorder
Recorder --> KeyboardEventRecorder
MouseEventRecorder --> MouseEvent
KeyboardEventRecorder --> KeyEvent
Main --> Replayer
@enduml